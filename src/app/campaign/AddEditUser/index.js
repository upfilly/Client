import React, { useState, useEffect } from "react";
import ApiClient from "../../../methods/api/apiClient";
import loader from "../../../methods/loader";
import methodModel from "../../../methods/methods";
import { addCampaignType } from "../../../models/type.model";
import Html from "./Html";
import { toast } from "react-toastify";
import { useRouter, useParams } from "next/navigation";
import crendentialModel from "@/models/credential.model";

const formFields = [
  "Do You de-duplicate publisher sales against any other Online advertising channels ?",
  "PPC Brand",
  "PPC Generic",
  "Display Advertising",
  "E-mail Advertising",
  "Direct Partnerships",
  "Price Comparison",
  "In House-Publisher Program",
  "other Affiliate Networks",
];

const formPpcFields = [
  {
    label:
      "If the Publishers Promote you via PPC, will they entitled for Full Commision?",
    showInput: false,
  },
  {
    label:
      "If Publisher Directly Link to your Website from search engine ,will they receive full commission?",
    showInput: false,
  },
  {
    label:
      "If publisher use your Brand name in their Display URL ,will they receive full commission?",
    showInput: false,
  },
  {
    label:
      "If publisher use your Brand name in their paid search title and Discription ,will they receive full commission?",
    showInput: false,
  },
  {
    label:
      "If publisher adds your Brand name into their negetive Keyword list ,will they receive full commission?",
    showInput: false,
  },
  {
    label:
      "If publisher Display their adds when your brand name or variations of you brand name are entered as search Keywords ,will they receive full commission?(eg. vodafone ,voda fone)",
    showInput: false,
  },
  {
    label:
      "If publisher Display their adds when when misspelling of your brand name are entered as keywords ill they receive full commission ?(eg. vodofone)",
    showInput: false,
  },
  {
    label:
      "If publisher Display their adds when your brand name and another keyword are entered as search keywords ,will they receive full commission ? (e.g vodafone mobile)",
    showInput: false,
  },
  {
    label:
      "Do you have a restricted Group of publishers who can earn commission on sales generated by brand related terms ?",
    showInput: false,
  },
  {
    label:
      "For any agreed publisher paid search activity , will publisher be paid for sales generated from the following search engines ?",
    showInput: false,
  },
  { label: "Google", showInput: true },
  { label: "yahoo", showInput: true },
  { label: "Bing", showInput: true },
  { label: "Other", showInput: true },
  {
    label:
      "Are there any specific search terms(keyword) where sales from publisher PPC adds will not be eligible to earn commision",
    showInput: true,
  },
  {
    label:
      "if publishers place shopping ads on a seacrh engine and link directly to your website ,are they eligble to receive full commission ?",
    showInput: false,
  },
  {
    label:
      "if publishers place shopping ads on a seacrh engine such as Comparison Shopping Service(CSS),does this activity needs to be tracked in a seprate specific publisher account ?",
    showInput: true,
  },
];

const formTransactionFields = [
  {
    label:
      "Does the transaction value that commissions are paid on include VAT? Sales Tax?",
    showInput: false,
  },
  {
    label:
      "Does the transaction value that commissions are paid on include Delivery charges?",
    showInput: false,
  },
  {
    label:
      "Does the transaction value that commissions are paid on include Credit card fees?",
    showInput: false,
  },
  {
    label:
      "Does the transaction value that commissions are paid on include gift wrapping or other service charges?",
    showInput: false,
  },
  {
    label:
      "Are commissions not paid out on some products or product categories?",
    showInput: false,
  },
  { label: "Order canceled", showInput: true },
  { label: "Item was returned", showInput: true },
  { label: "Customer failed credit check", showInput: true },
  { label: "Breach of program terms", showInput: true },
  { label: "Duplicate order", showInput: true },
  { label: "Item was out of stock", showInput: true },
  { label: "Other", showInput: true },
];

const formPublisherFields = [
  "Cashback",
  "Community",
  "Content",
  "Coupon Code",
  "E-mail",
  "Loyalty",
  "Search",
  "Behavioural Retargeting",
  "Media Brokers",
  "Are there any other restrictions that publishers need to consider?",
];

const AddEditUser = () => {
  const { role, id } = useParams();
  const user = crendentialModel.getUser();
  const [images, setImages] = useState({ image: "" });
  const [selectedItems, setSelectedItems] = useState({
    categories: [],
    subCategories: [],
    subSubCategories: [],
  });
  const [profileData, setProfileData] = useState();
  const [selectedRegionItems, setSelectedRegionItems] = useState({
    regions: [],
    countries: [],
  });
  const defaultvalue = addCampaignType;
  const [form, setform] = useState({
    id: "",
    name: "",
    // amount: "",
    description: "",
    images: [],
    documents: [],
    // videos: [],
    affiliate_id: null,
    status: "",
    access_type: "",
    event_type: [],
  });
  const [affiliateData, setAffiliateData] = useState();
  const [eyes, setEyes] = useState({ password: false, confirmPassword: false });
  const [submitted, setSubmitted] = useState(false);
  const history = useRouter();
  const [emailLoader, setEmailLoader] = useState(false);
  const [emailErr, setEmailErr] = useState("");
  const [errors, setErrors] = useState({});
  const [detail, setDetail] = useState();
  const [formData, setFormData] = useState(
    formFields.reduce((acc, field) => {
      acc[field] = { value: "Yes", additionalInfo: "" };
      return acc;
    }, {})
  );

  console.log(detail, "detail");

  const [formPpcData, setFormPpcData] = useState(
    formPpcFields.reduce((acc, field) => {
      acc[field.label] = { value: "Yes", additionalInfo: "" };
      return acc;
    }, {})
  );
  const [formPublisherData, setFormPublisherData] = useState(
    formPublisherFields.reduce((acc, field) => {
      acc[field] = { value: "Yes", additionalInfo: "" };
      return acc;
    }, {})
  );
  const [formTransactionData, setFormTransactionData] = useState(
    formTransactionFields.reduce((acc, field) => {
      acc[field.label] = { value: "Yes", additionalInfo: "" };
      return acc;
    }, {})
  );
  const [isAgreed, setIsAgreed] = useState(false);
  const [legalTerm, setlegalTerm] = useState("");

  const getError = (key) => {
    return methodModel.getError(key, form, formValidation);
  };

  const validate = () => {
    let formErrors = {};
    if (!form.name) formErrors.name = "Name is required";
    if (!form.access_type) formErrors.access_type = "Access Type is required";
    if (form.event_type.length == 0)
      formErrors.event_type = "Event Type is required";
    if (form.event_type?.includes("lead") && !form.lead_amount)
      formErrors.lead_amount = "Lead Amount is required";
    if (form.event_type?.includes("purchase") && !form.campaign_type)
      formErrors.campaign_type = "Affiliate Approval is required";
    // if (form.commission_type === "percentage" && !form.commission) formErrors.commission = 'Percentage is required';
    // if (form.commission_type === "amount" && !form.commission) formErrors.commission = 'Amount is required';
    // if (!form.category_type) formErrors.category_type = 'Category Type is required';
    if (!form.currencies) formErrors.currencies = "Currency is required";
    if (!form?.campaign_type)
      formErrors.campaign_type = "Campaign type is required";
    if (!form.description) formErrors.description = "Description is required";
    if (selectedRegionItems?.regions.length == 0)
      formErrors.region = "Country is required";
    if (selectedItems?.categories.length == 0)
      formErrors.categories = "Categories is required";

    setErrors(formErrors);
    return Object.keys(formErrors).length === 0;
  };

  const handleSubmit = (e) => {
    e.preventDefault();

    // if (!form?.description || !form?.name || !form?.event_type) {

    // }
    console.log(validate(), "opoppop");

    if (!validate()) {
      setSubmitted(true);
      return;
    }

    let method = "post";
    let url = "campaign";

    let value = {
      ...form,
      // commission_type: "percentage",
      // commission: "1",
      region: selectedRegionItems?.regions,
      region_continents: selectedRegionItems?.countries,
      campaign_type: form?.campaign_type,
      category: selectedItems?.categories,
      sub_category: selectedItems?.subCategories,
      sub_child_category: selectedItems?.subSubCategories,
      brand_id: user?.id || user?._id,
      islegal: isAgreed,
      legalTerm: legalTerm,
      transaction: formTransactionData,
      ppc: formPpcData,
      publisher: formPublisherData,
      deDuplicate: formData,
    };
    console.log(value, "subbbbb");
    // return;
    if (!form.event_type?.includes("purchase")) {
      value = {
        ...form,
        commission_type: "percentage",
        // commission: "",
        region: selectedRegionItems?.regions,
        region_continents: selectedRegionItems?.countries,
        campaign_type: form?.campaign_type,
        category: selectedItems?.categories,
        sub_category: selectedItems?.subCategories,
        sub_child_category: selectedItems?.subSubCategories,
        brand_id: user?.id || user?._id,
        islegal: isAgreed,
        legalTerm: legalTerm,
        transaction: formTransactionData,
        ppc: formPpcData,
        publisher: formPublisherData,
        deDuplicate: formData,
      };
    }
    delete value.status;
    if (value.id) {
      method = "put";
      url = "campaign";
      delete value.role;
      delete value.improvements;
      delete value.status;
      delete value.amount;
      delete value.event_type;
      delete value.brand_id;
      delete value.commission;
      delete value.commission_type;
      delete value.lead_amount;
      delete value.region_continents;
    } else {
      delete value.id;
    }

    if (value?.access_type == "public") {
      delete value?.affiliate_id;
    }

    delete value.confirmPassword;
    loader(true);
    ApiClient.allApi(url, value, method).then((res) => {
      if (res.success) {
        toast.success(res.message);
        let url = "/campaign";
        // if (role) url = "/campaign/" + role
        history.push(url);
      }
      loader(false);
    });
  };

  const imageResult = (e, key) => {
    images[key] = e.value;
    setImages(images);
  };

  const addressResult = (e) => {
    setform({ ...form, address: e.value });
  };

  const back = () => {
    history.back();
  };

  const emailCheck = (email) => {
    let isValid = methodModel.emailvalidation(email);
    if (isValid) {
      // setEmailLoader(true)
      // ApiClient.get('api/check/email',{email:email}).then(res=>{
      //     if(!res.success){
      //         if(detail?.email!=email){
      //             setEmailErr(res.error.message)
      //         }
      //     }else{
      //         setEmailErr('')
      //     }
      //     setEmailLoader(false)
      // })
    }
  };

  console.log(form, "klklklklklklkl");

  useEffect(() => {
    setSubmitted(false);
    if (id) {
      loader(true);
      ApiClient.get("campaign", { id }).then((res) => {
        if (res.success) {
          const value = res.data;
          console.log(value, "oopopopopop");
          setDetail(value);
          // let payload = { ...defaultvalue };
          // let oarr = Object.keys(defaultvalue);

          // oarr.forEach((itm) => {
          //     if (itm === 'affiliate_id' && value[itm] && value[itm].id) {
          //         payload[itm] = value[itm].id.toString();
          //     } else {
          //         payload[itm] = value[itm] || "";
          //     }
          // });
          setform({
            id: value?.id || value?._id,
            name: value?.name,
            isDefault: value?.isDefault,
            commission: value?.commission,
            commission_type: value?.commission_type,
            campaign_type: value?.campaign_type || "manual",
            currencies: value?.currencies,
            lead_amount: value?.lead_amount,
            access_type: value?.access_type,
            description: value?.description,
            documents: value?.documents,
            affiliate_id: value?.affiliate_id,
            status: value?.status,
            access_type: value?.access_type,
            event_type: value?.event_type,
            region: value?.region,
            region_continents: value?.region_continents,
          });
          setSelectedItems({
            categories: value?.category?.map((dat) => dat?.id),
            subCategories: value?.sub_category?.map((dat) => dat?.id),
            subSubCategories: value?.sub_child_category?.map((dat) => dat?.id),
          });
          setSelectedRegionItems({
            regions: value?.region,
            countries: value?.region_continents,
          });
        }
        loader(false);
      });
    }
  }, [id]);

  const getData = (p = {}) => {
    let url = "getallaffiliatelisting";
    ApiClient.get(url, { brand_id: user?.id || user?._id }).then((res) => {
      if (res.success) {
        const data = res?.data?.map((data) => {
          console.log(data, "jhjhjhj");
          return {
            id: data?.id || data?._id,
            name: data?.userName,
          };
        });
        const filteredData = data.filter((item) => item !== null);
        setAffiliateData(filteredData);
      }
    });
  };

  const getProfileDetail = () => {
    loader(true);
    ApiClient.get(`user/detail`, { id: user?.id || user?._id }).then((res) => {
      if (res.success) {
        setProfileData(res.data);
      }
      loader(false);
    });
  };

  useEffect(() => {
    getData();
    getProfileDetail();
  }, []);

  return (
    <>
      <Html
        id={id}
        form={form}
        detail={detail}
        emailCheck={emailCheck}
        emailLoader={emailLoader}
        emailErr={emailErr}
        back={back}
        setEyes={setEyes}
        eyes={eyes}
        role={role}
        setform={setform}
        submitted={submitted}
        images={images}
        addressResult={addressResult}
        handleSubmit={handleSubmit}
        imageResult={imageResult}
        getError={getError}
        affiliateData={affiliateData}
        errors={errors}
        setErrors={setErrors}
        validate={validate}
        selectedItems={selectedItems}
        setSelectedItems={setSelectedItems}
        selectedRegionItems={selectedRegionItems}
        setSelectedRegionItems={setSelectedRegionItems}
        profileData={profileData}
        formData={formData}
        setFormData={setFormData}
        formPpcData={formPpcData}
        setFormPpcData={setFormPpcData}
        formPublisherData={formPublisherData}
        setFormPublisherData={setFormPublisherData}
        formTransactionData={formTransactionData}
        setFormTransactionData={setFormTransactionData}
        isAgreed={isAgreed}
        setIsAgreed={setIsAgreed}
        legalTerm={legalTerm}
        setlegalTerm={setlegalTerm}
        formFields={formFields}
        formPpcFields={formPpcFields}
        formTransactionFields={formTransactionFields}
        formPublisherFields={formPublisherFields}
      />
    </>
  );
};

export default AddEditUser;
